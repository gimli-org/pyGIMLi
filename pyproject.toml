[build-system]
requires = ["setuptools", "versioneer[toml]==0.29"]
#requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["pygimli"]

[project]
name = "pygimli"
#dynamic = ["version"] ## versioneer does not yet seems to work
version = "1.5.4"
requires-python = ">=3.10"
authors = [
  { name = "Carsten Rücker" },
  { name= "Thomas Günther" },
  { name= "Florian Wagner" },
  { email = "mail@pygimli.org" },
]
description = "Geophysical Inversion and Modelling Library"
readme = "README.md"
license = "Apache-2.0"
license-files = ["LICENSE.md"]
keywords = [
    "Geophysical Inversion",
    "Geophysical Modelling"
]
classifiers = [
    "Development Status :: 5 - Stable",
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "numpy>=2.1.3",
    "setuptools",
]

[project.optional-dependencies]
opt = [
    "ipython",
    "matplotlib>3.7",
    "meshio",
    "pyvista[all]>=0.46",
    "pyqt5",
    "scipy>=1.14,<1.15",
    "scooby",
    "tetgen>=0.6.5",
    "tqdm",
]
build = [
    "pygccxml==2.5.0",
    "pyplusplus==1.8.5",
    "build",
    "twine",
    "wheel",
    "auditwheel; sys_platform == 'linux'",
    "delvewheel; sys_platform == 'win32'",
    "delocate; sys_platform == 'darwin'",
]
test = [
    "pygimli[opt]",
    "tox",
    "ruff",
    "coverage[toml]",
    "pytest>=6.0",
    "pytest-cov",
    "pytest-html",
    "pylint",
]
doc = [
    "pygimli[test]",
    "bibtexparser",
    "jupytext",
    "linkify-it-py",
    "myst_nb",
    "pydata-sphinx-theme",
    "sphinx>=3.1",
    "sphinxcontrib-bibtex",
    "sphinxcontrib-doxylink",
    "sphinxcontrib-programoutput",
    "sphinx-gallery",
    "sphinx-design",
]
dev = [
    "pygimli[opt, test, doc, build]",
]
all = [
    "pygimli[dev]",
]
[project.urls]
Homepage = "https://www.pygimli.org"
Documentation = "https://www.pygimli.org/documentation.html"
Repository = "https://github.com/gimli-org/gimli"
"Bug Tracker" = "https://github.com/gimli-org/gimli/issues"
Changelog = "https://github.com/gimli-org/gimli/releases"

[tool.versioneer]
VCS = "git"
style = "pep440"
versionfile_source = "pygimli/_version.py"
versionfile_build = "pygimli/_version.py"
tag_prefix = ""
parentdir_prefix = "pygimli-"

[tool.tox]
    requires = ["tox>=4.27"]
    envlist = [
        "py313",
        "ruff",
    ]

    [tool.tox.env_run_base]
        description = "Run test under {base_python}"
        commands = [["pytest"]]

[tool.tox.ruff]
labels = ["ruff"]

[tool.coverage.run]
branch = true
omit = [
    "pygimli/testing/*",
]

[tool.coverage.report]
exclude_lines = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug:",
    "if debug:",
    "if DEBUG:",
    "if pg.core.deepDebug() == -1:",
    "pg.critical",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
]

[tool.ruff]
target-version = 'py313'

exclude = [
    "__pycache__",
    ".venv",
    ".venv-py310",
    ".venv-py311",
    ".venv-py312",
    ".venv-py313",
]

line-length = 80

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # Error
    "F",  # pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "PGH",  # pygrep-hooks
    "PTH", # flake8-use-pathlib
    "Q",  # flake8-quotes
    "S",  # bandit
    "SIM",  # flake8-simplify
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Warning
    "YTT", # flake8-2020
]

ignore = [
    # "D100",
    # "D101",
    # "D102",
    # "D103",
    # "D104",
    # "D105",
    # "D106",
    # "D107",
    # "D200",
    # "D401",
    # "E402",
    # "E501",
    # "F401",
    "C408", # Allow use dic(**kwargs)
    "E731", # Allow simple lambda function generators
    "E741", # Allow use of l I o, variable names
    "I001",  # Allow unsorted imports
    "N802",  # Allow "as" name should be lowercase
    "N803",  # Allow name should be lowercase
    "N806",  # Allow name should be lowercase
    "N999",  # Allow "wrong" modulname
    "Q000",  # Allow single quotes in docstrings
    "Q001",  # Allow double quotes in docstrings
    "S110",  # Allow use of except/pass
    "SIM105", # all try: BaseException except: pass
    "SIM114", # no need for logical if branches
    "SIM223", # Allow if 0 and ...
    "TRY003",  # Avoid specifying messages outside exception class; overly strict, especially for ValueError
]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "chr",
    "typer.Argument",
    "typer.Option",
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
    # "D100",
    # "D101",
    # "D102",
    # "D103",
    # "D104",
    # "D105",
    # "D106",
    # "D107",
    "S101",  # use of "assert"
    "S102",  # use of "exec"
    "S106",  # possible hardcoded password.
    "PGH001",  # use of "eval"
]

[tool.ruff.lint.pep8-naming]
staticmethod-decorators = [
    "pydantic.validator",
    "pydantic.root_validator",
]
